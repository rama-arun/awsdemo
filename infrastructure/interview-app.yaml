---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template AutoScalingMultiAZWithNotifications:
  Create a multi-az, load balanced and Auto Scaled sample web site running on an Apache
  Web Serever. The application is configured to span all Availability Zones in the
  region and is Auto-Scaled based on the CPU utilization of the web servers. Notifications
  will be sent to the operator email address on scaling events. The instances are
  load balanced with a simple health check against the default web page.'
Parameters:
  ENV:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"
    AllowedValues: 
      - "demo"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VpcId of your existing Virtual Private Cloud (VPC)"
  PubSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "The list of Public SubnetIds in your Virtual Private Cloud (VPC)"
  PrvSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "The list of Private SubnetIds in your Virtual Private Cloud (VPC)"
  WEBELBSG:
    Type: "String"
    Description: "SG for ELB"
  InstanceType:
    Description: "WebServer EC2 instance type"
    Type: "String"
  OperatorEMail:
    Description: "EMail address to notify if there are any scaling operations"
    Type: "String"
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: "The IP address range that can be used to SSH to the EC2 instances"
    Type: "String"
  ASMIN:
    Description: "A reference to the MinSize"
    Type: "String"
  ASMAX:
    Description: "A reference to the MaxSize"
    Type: "String"
  RegionAMI:
    Description: "A reference to the Region AMI"
    Type: "String"

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: OperatorEMail
        Protocol: email

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: PrvSubnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: !Ref "ASMIN"
      MaxSize: !Ref "ASMAX"
      TargetGroupARNs:
      - Ref: ALBTargetGroup
      NotificationConfiguration:
        TopicARN:
          Ref: NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content:
                Fn::Join:
                - "\n"
                - - "<h2>Rama Arun - Interview AWS - Senior Solutions Architect - 07/08/2020</h2>"
                  - "Github - <a href='https://github.com/rama-arun/awsdemo.git'>GITHUB Link to CloudFormation Resources</a>"
                  - "\n"
                  - "Presentation Slide - <a href='https://rama-interview-templates.s3.amazonaws.com/RAMAKRISHNA_ARUN_SA+Presentation+Role+Play+Scenario+2020.pdf'>Presentation PDF Link</a>"
                  - <img src='https://rama-interview-templates.s3.amazonaws.com/rama.png' alt='Demo Architecture' width='1500' height='850'/>
              mode: '000644'
              owner: root
              group: root
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update

'
                  - 'path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init

'
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - "         --stack "
                  - Ref: AWS::StackName
                  - "         --resource LaunchConfig "
                  - "         --region "
                  - Ref: AWS::Region
                  - "\n"
                  - 'runas=root

'
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      KeyName:
        Ref: "KeyName"
      ImageId:
        Ref: "RegionAMI"
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - 'yum update -y aws-cfn-bootstrap

'
            - 'yum update -y aws-cli

'
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource LaunchConfig "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource WebServerGroup "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        Ref: PubSubnets
      SecurityGroups:
      - Ref: WEBELBSG
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VpcId
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - ApplicationLoadBalancer
            - SecurityGroups
      VpcId:
        Ref: VpcId
Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
  WEBLoadBalancer:
    Description: "A reference to the Web Load Balancer"
    Value: !Ref "ApplicationLoadBalancer"

  WEBLBDNSName:
    Description: "The URL of the Web Load Balancer"
    Value: !GetAtt "ApplicationLoadBalancer.DNSName"

  HostedZoneId:
    Description: "The HostedZoneId of the Web Load Balancer"
    Value: !GetAtt "ApplicationLoadBalancer.CanonicalHostedZoneID"
